/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;

import com.sun.glass.events.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author DoctorOne
 */
public class ChatPanel extends javax.swing.JPanel {

    private int MessageId;
    private int Side = 1;
    private String User = "TheDoctorOne";
    private String Oppenent = "Mahmut";
    private String Messages;
    /** In Constructor
     *  Int MessageId
     *  Int Side
     *  String User
     *  String Messages
     * String Oppenent
     */
    /**
     * Creates new form ChatPanel
     */
    private String toAddMessage;
    private Connection c;
    
    public ChatPanel(String User, String Oppenent) {
		this.User = User;
		this.Oppenent = Oppenent;
        initComponents();
        MessageArea.setEditable(false);
        c = new Connection();
        ResultSet rs = c.getMessagesByName(User, Oppenent);
        try {
            if(rs.first()){
                MessageId = rs.getInt("MessageId");
                String Message = rs.getString("Message");
                if(!Message.equals(null) && !Message.trim().equals(""))
                    MessageArea.setText(Message);

                String User1 = rs.getString("User1");
                String User2 = rs.getString("User2");

                if(User.equals(User1))
                    Side = 0;
                else if(User.equals(User2))
                    Side = 1;

            }
        } catch (SQLException ex) {
                Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        MessageReciever();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MessageArea = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        newMessageArea = new javax.swing.JTextArea();
        SendButton = new javax.swing.JButton();
        EnterToSend = new javax.swing.JCheckBox();

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);

        MessageArea.setContentType("text/html"); // NOI18N
        MessageArea.setText("<html>\r\n  <head>\r\n\r\n  </head>\r\n  <body>  </body></html>\r\n");
        MessageArea.setToolTipText("");
        MessageArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(MessageArea);

        newMessageArea.setColumns(20);
        newMessageArea.setRows(5);
        newMessageArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                newMessageAreaKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(newMessageArea);

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        EnterToSend.setSelected(true);
        EnterToSend.setText("Enter to Send");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EnterToSend, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(SendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EnterToSend)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        // TODO add your handling code here:
        String m = newMessageArea.getText();
        newMessageArea.setText("");
        new Thread(new Runnable() {
            @Override
            public void run() {
                if(m.equals("") || m.trim().equals("") || m.trim().equals(" ") || m.equals(" ")){
                    
                }else
                    generateMessage(m);
            }
        }).start();
        
    }//GEN-LAST:event_SendButtonActionPerformed

    private void newMessageAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newMessageAreaKeyPressed
        if(EnterToSend.isSelected() && evt.getKeyCode() == KeyEvent.VK_ENTER){
            String m = newMessageArea.getText();
            newMessageArea.setText("");
            new Thread(new Runnable() {
                @Override
                public void run() {
                if(m.equals("") || m.trim().equals("") || m.trim().equals(" ") || m.equals(" ")){
                    
                }else
                    generateMessage(m);
            }
            }).start();
        }
    }//GEN-LAST:event_newMessageAreaKeyPressed

    private void MessageReciever(){
        new Thread(new Runnable() {
            @Override
            public void run() {
                while(true){
                    
                    String Message = c.getMessagesById(MessageId);
                    if(!MessageArea.getText().equals(Message))
                        MessageArea.setText(Message);
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }).start();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox EnterToSend;
    private javax.swing.JEditorPane MessageArea;
    private javax.swing.JButton SendButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea newMessageArea;
    // End of variables declaration//GEN-END:variables
    
    //<editor-fold defaultstate="collapsed" desc="New Message Generation & Send">
    
    //<editor-fold defaultstate="collapsed" desc="Message Generate">
    private void generateMessage(String text){
        
        String generatedMessage = null;
        if(Side==0){                //Color Red - Left Side
            generatedMessage="<!--m-->"
                    + "<div align = \"left\" "
                    + "<font color= \"red\" ><b>"
                    + User
                    + "<br></font></b>"
                    + "<font color=\"black\">"
                    + text
                    + "<br></font></div>";
        }
        else if(Side==1){           //Color Blue- Right Side
            generatedMessage="<!--m-->"
                    + "<div align =\"right\""
                    + "<font color=\"blue\"><b>"
                    + User
                    + "<br></font></b>"
                    + "<font color=\"black\">"
                    + text
                    + "</font><br></div>";
        }
        
        if(generatedMessage != null){
            SendMessage(generatedMessage);
            
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Sending Message">
    /** 
     * Gets Messages from database
     * Splits it to body part
     * Adds the new Message
     * Counts Messages than shorts it to last 20 Message
     * Builds the HTML code
     * Sends the Message.
     */
    private void SendMessage(String generatedMessage){
        
        Messages = c.getMessagesById(MessageId); //Gets the messages from database.
        
        //<editor-fold desc="Split to Body">
            String[] holder = Messages.split("<body>");
            String[] holder2 = holder[1].split("</body>");
            Messages = holder2[0];
        //</editor-fold>
        
        Messages = Messages + generatedMessage; //Adds the new Message
        
        //<editor-fold defaultstate="collapsed" desc="Counts and shorts the message">
        String[] MessageList = Messages.split("<!--m-->");
        ArrayList<String> newMessageList;
        newMessageList = new ArrayList<>();
         
        if(MessageList.length > 24){
            Messages = "";
            for(int i = 22; i > 0 ; i--){
                newMessageList.add(MessageList[MessageList.length - i]);
                
            }
            for(String s : newMessageList){
                Messages += s;
            }
        }
        
        
        //</editor-fold>
        
        //HTML Building
        
        Messages = holder[0] + "<body>" + Messages + "</body>" + holder2[1];
       
        MessageArea.setText(Messages);
        
        c.sendMessageById(MessageId,Messages);
    }
    //</editor-fold>
    
    //</editor-fold>

    

}
